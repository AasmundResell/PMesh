#!/usr/bin/env python

###
### This file is generated automatically by SALOME v9.9.0 with dump python functionality
###

import sys
import salome

salome.salome_init()
import salome_notebook
notebook = salome_notebook.NoteBook()
sys.path.insert(0, r'/home/asmund/dev/PMesh/Scripts')

###
### SHAPER component
###

###
### SHAPERSTUDY component
###

model.publishToShaperStudy()
import SHAPERSTUDY
# This shape does not exist among the SHAPER results; if it is referenced by SMESH, this may cause an error
# Revolution_1_1, = SHAPERSTUDY.shape("dead01_8:35")
# This shape does not exist among the SHAPER results; if it is referenced by SMESH, this may cause an error
# Revolution_1_2, = SHAPERSTUDY.shape("dead02_8:35:1")
# This shape does not exist among the SHAPER results; if it is referenced by SMESH, this may cause an error
# Revolution_2_1, = SHAPERSTUDY.shape("dead03_8:36")
# This shape does not exist among the SHAPER results; if it is referenced by SMESH, this may cause an error
# Revolution_3_1, = SHAPERSTUDY.shape("dead04_8:37")
# This shape does not exist among the SHAPER results; if it is referenced by SMESH, this may cause an error
# Revolution_3_2, = SHAPERSTUDY.shape("dead05_8:37:1")
# This shape does not exist among the SHAPER results; if it is referenced by SMESH, this may cause an error
# Revolution_1_1_1, = SHAPERSTUDY.shape("dead06_9:35")
# This shape does not exist among the SHAPER results; if it is referenced by SMESH, this may cause an error
# Revolution_1_2_1, = SHAPERSTUDY.shape("dead07_9:35:1")
# This shape does not exist among the SHAPER results; if it is referenced by SMESH, this may cause an error
# Revolution_2_1_1, = SHAPERSTUDY.shape("dead08_9:36")
# This shape does not exist among the SHAPER results; if it is referenced by SMESH, this may cause an error
# Revolution_3_1_1, = SHAPERSTUDY.shape("dead09_9:37")
# This shape does not exist among the SHAPER results; if it is referenced by SMESH, this may cause an error
# Revolution_3_2_1, = SHAPERSTUDY.shape("dead010_9:37:1")
###
### GEOM component
###

import GEOM
from salome.geom import geomBuilder
import math
import SALOMEDS


geompy = geomBuilder.New()

(imported, Revolution_1_1, [], [], []) = geompy.ImportXAO("/tmp/shaper_start_0.xao")
(imported, Revolution_1_2, [], [], []) = geompy.ImportXAO("/tmp/shaper_ConicNose.xao")
(imported, Revolution_2_1, [], [], []) = geompy.ImportXAO("/tmp/shaper_middle_1.xao")
(imported, Revolution_3_1, [], [], []) = geompy.ImportXAO("/tmp/shaper_middle_2.xao")
(imported, Revolution_3_2, [], [], []) = geompy.ImportXAO("/tmp/shaper_rear_2.xao")
start_0 = geompy.CreateGroup(Revolution_1_1, geompy.ShapeType["FACE"])
geompy.UnionList(start_0, [Revolution_1_1])
ConicNose = geompy.CreateGroup(Revolution_1_2, geompy.ShapeType["FACE"])
geompy.UnionList(ConicNose, [Revolution_1_2])
middle_1 = geompy.CreateGroup(Revolution_2_1, geompy.ShapeType["FACE"])
geompy.UnionList(middle_1, [Revolution_2_1])
middle_2 = geompy.CreateGroup(Revolution_3_1, geompy.ShapeType["FACE"])
geompy.UnionList(middle_2, [Revolution_3_1])
rear_2 = geompy.CreateGroup(Revolution_3_2, geompy.ShapeType["FACE"])
geompy.UnionList(rear_2, [Revolution_3_2])
ShellProjectile = geompy.MakeShell([Revolution_1_1, Revolution_1_2, Revolution_2_1, Revolution_3_1, Revolution_3_2])
Projectile = geompy.MakeSolid([ShellProjectile])
[Edge_1] = geompy.SubShapes(Projectile, [5])
[Vertex_3,Vertex_4,Vertex_5] = geompy.SubShapes(Projectile, [15, 10, 20])
geomObj_1 = geompy.MakeVertex(-200, 0, 0)
geomObj_2 = geompy.MakeVectorDXDYDZ(1, 0, 0)
geomObj_3 = geompy.MakeCylinder(geomObj_1, geomObj_2, 200, 475.9)
geomObj_4 = geompy.MakeCutList(geomObj_3, [Projectile], True)
geomObj_5 = geompy.CreateGroup(geomObj_4, geompy.ShapeType["FACE"])
geompy.UnionIDs(geomObj_5, [3, 10, 12])
geomObj_6 = geompy.CreateGroup(geomObj_4, geompy.ShapeType["FACE"])
geompy.UnionIDs(geomObj_6, [15, 22, 27, 32])
[geomObj_5, geomObj_6] = geompy.GetExistingSubObjects(geomObj_4, False)
ox = geompy.MakeVectorDXDYDZ(1, 0, 0)
Vertex_1 = geompy.MakeVertex(0, 0, 0)
geomObj_7 = geompy.MakeCylinder(Vertex_1, ox, 100, 300)
(imported, geomObj_8, [], [], []) = geompy.ImportXAO("/tmp/shaper_if8vzq4n.xao")
(imported, geomObj_9, [], [], []) = geompy.ImportXAO("/tmp/shaper_y2iu8i25.xao")
(imported, geomObj_10, [], [], []) = geompy.ImportXAO("/tmp/shaper_rksjn16x.xao")
(imported, geomObj_11, [], [], []) = geompy.ImportXAO("/tmp/shaper_7n7tcb_0.xao")
(imported, geomObj_12, [], [], []) = geompy.ImportXAO("/tmp/shaper_sdf784l5.xao")
oz = geompy.MakeVectorDXDYDZ(0, 0, 1)
oy = geompy.MakeVectorDXDYDZ(0, 1, 0)
geomObj_13 = geompy.MakeCutList(geomObj_7, [Projectile], True)
geomObj_14 = geompy.MakePlane(Vertex_3, ox, 2000)
geomObj_15 = geompy.MakePlane(Vertex_4, ox, 2000)
geomObj_16 = geompy.MakePlane(Vertex_5, ox, 2000)
Farfield_vertex = geompy.MakeVertex(-644, 0, 0)
Outer_domain = geompy.MakeCylinder(Farfield_vertex, ox, 741, 919.9)
Inner_Domain_vertex = geompy.MakeVertex(-10, 0, 0)
Inner_domain = geompy.MakeCylinder(Inner_Domain_vertex, ox, 24.3, 110)
Projectile_edge_9 = geompy.GetSubShape(Projectile, [9])
Projectile_edge_14 = geompy.GetSubShape(Projectile, [14])
geomObj_17 = geompy.MakeVertex(5, 0, 0)
Vertex_2 = geompy.MakeVertex(41.2, 0, 0)
Vertex_7 = geompy.MakeVertex(73.90000000000001, 0, 0)
Vertex_6 = geompy.MakeVertex(75, 0, 0)
geomObj_18 = geompy.GetFaceNearPoint(Projectile, Vertex_1)
Inner_cut = geompy.MakeCutList(Inner_domain, [Projectile], True)
(imported, Revolution_1_1_1, [], [], []) = geompy.ImportXAO("/tmp/shaper_start_0.xao")
(imported, Revolution_1_2_1, [], [], []) = geompy.ImportXAO("/tmp/shaper_ConicNose.xao")
(imported, Revolution_2_1_1, [], [], []) = geompy.ImportXAO("/tmp/shaper_middle_1.xao")
(imported, Revolution_3_1_1, [], [], []) = geompy.ImportXAO("/tmp/shaper_middle_2.xao")
(imported, Revolution_3_2_1, [], [], []) = geompy.ImportXAO("/tmp/shaper_rear_2.xao")
start_0_1 = geompy.CreateGroup(Revolution_1_1_1, geompy.ShapeType["FACE"])
geompy.UnionList(start_0_1, [Revolution_1_1_1])
ConicNose_1 = geompy.CreateGroup(Revolution_1_2_1, geompy.ShapeType["FACE"])
geompy.UnionList(ConicNose_1, [Revolution_1_2_1])
middle_1_1 = geompy.CreateGroup(Revolution_2_1_1, geompy.ShapeType["FACE"])
geompy.UnionList(middle_1_1, [Revolution_2_1_1])
middle_2_1 = geompy.CreateGroup(Revolution_3_1_1, geompy.ShapeType["FACE"])
geompy.UnionList(middle_2_1, [Revolution_3_1_1])
rear_2_1 = geompy.CreateGroup(Revolution_3_2_1, geompy.ShapeType["FACE"])
geompy.UnionList(rear_2_1, [Revolution_3_2_1])
ShellProjectile_1 = geompy.MakeShell([Revolution_1_1_1, Revolution_1_2_1, Revolution_2_1_1, Revolution_3_1_1, Revolution_3_2_1])
Projectile_1 = geompy.MakeSolid([ShellProjectile_1])
[Edge_1_1] = geompy.SubShapes(Projectile_1, [5])
[Vertex_3_1,Vertex_4_1,Vertex_5_1] = geompy.SubShapes(Projectile_1, [15, 10, 20])
geomObj_19 = geompy.MakeVertex(-200, 0, 0)
geomObj_20 = geompy.MakeVectorDXDYDZ(1, 0, 0)
geomObj_21 = geompy.MakeCylinder(geomObj_19, geomObj_20, 200, 475.9)
geomObj_22 = geompy.MakeCutList(geomObj_21, [Projectile_1], True)
geomObj_23 = geompy.CreateGroup(geomObj_22, geompy.ShapeType["FACE"])
geompy.UnionIDs(geomObj_23, [3, 10, 12])
geomObj_24 = geompy.CreateGroup(geomObj_22, geompy.ShapeType["FACE"])
geompy.UnionIDs(geomObj_24, [15, 22, 27, 32])
[geomObj_23, geomObj_24] = geompy.GetExistingSubObjects(geomObj_22, False)
ox_1 = geompy.MakeVectorDXDYDZ(1, 0, 0)
Vertex_1_1 = geompy.MakeVertex(0, 0, 0)
geomObj_25 = geompy.MakeCylinder(Vertex_1_1, ox_1, 100, 300)
(imported, geomObj_26, [], [], []) = geompy.ImportXAO("/tmp/shaper_if8vzq4n.xao")
(imported, geomObj_27, [], [], []) = geompy.ImportXAO("/tmp/shaper_y2iu8i25.xao")
(imported, geomObj_28, [], [], []) = geompy.ImportXAO("/tmp/shaper_rksjn16x.xao")
(imported, geomObj_29, [], [], []) = geompy.ImportXAO("/tmp/shaper_7n7tcb_0.xao")
(imported, geomObj_30, [], [], []) = geompy.ImportXAO("/tmp/shaper_sdf784l5.xao")
oz_1 = geompy.MakeVectorDXDYDZ(0, 0, 1)
oy_1 = geompy.MakeVectorDXDYDZ(0, 1, 0)
geomObj_31 = geompy.MakeCutList(geomObj_25, [Projectile_1], True)
geomObj_32 = geompy.MakePlane(Vertex_3_1, ox_1, 2000)
geomObj_33 = geompy.MakePlane(Vertex_4_1, ox_1, 2000)
geomObj_34 = geompy.MakePlane(Vertex_5_1, ox_1, 2000)
Farfield_vertex_1 = geompy.MakeVertex(-644, 0, 0)
Outer_domain_1 = geompy.MakeCylinder(Farfield_vertex_1, ox_1, 741, 919.9)
Inner_Domain_vertex_1 = geompy.MakeVertex(-10, 0, 0)
Inner_domain_1 = geompy.MakeCylinder(Inner_Domain_vertex_1, ox_1, 24.3, 110)
Projectile_edge_9_1 = geompy.GetSubShape(Projectile_1, [9])
Projectile_edge_14_1 = geompy.GetSubShape(Projectile_1, [14])
geomObj_35 = geompy.MakeVertex(5, 0, 0)
Vertex_2_1 = geompy.MakeVertex(41.2, 0, 0)
Vertex_7_1 = geompy.MakeVertex(73.90000000000001, 0, 0)
Vertex_6_1 = geompy.MakeVertex(80, 0, 0)
geomObj_36 = geompy.GetFaceNearPoint(Projectile_1, Vertex_1_1)
Plane_1 = geompy.MakePlane(Inner_Domain_vertex_1, oz_1, 2000)
Plane_2 = geompy.MakePlane(geomObj_35, ox_1, 2000)
Plane_3 = geompy.MakePlane(Vertex_7_1, ox_1, 2000)
Plane_4 = geompy.MakePlane(Vertex_6_1, ox_1, 2000)
Plane_5 = geompy.MakePlane(Vertex_2_1, ox_1, 2000)
Inner_cut_1 = geompy.MakeCutList(Inner_domain_1, [Projectile_1], True)
innerDomainPartition = geompy.MakePartition([Inner_cut_1], [Plane_2, Plane_3, Plane_4, Plane_5], [], [], geompy.ShapeType["SOLID"], 0, [], 0)
geompy.addToStudy( Revolution_1_1, 'Revolution_1_1' )
geompy.addToStudy( Revolution_1_2, 'Revolution_1_2' )
geompy.addToStudy( Revolution_2_1, 'Revolution_2_1' )
geompy.addToStudy( Revolution_3_1, 'Revolution_3_1' )
geompy.addToStudy( Revolution_3_2, 'Revolution_3_2' )
geompy.addToStudyInFather( Revolution_1_1, start_0, 'start_0' )
geompy.addToStudyInFather( Revolution_1_2, ConicNose, 'ConicNose' )
geompy.addToStudyInFather( Revolution_2_1, middle_1, 'middle_1' )
geompy.addToStudyInFather( Revolution_3_1, middle_2, 'middle_2' )
geompy.addToStudyInFather( Revolution_3_2, rear_2, 'rear_2' )
geompy.addToStudy( ShellProjectile, 'ShellProjectile' )
geompy.addToStudy( Projectile, 'Projectile' )
geompy.addToStudyInFather( Projectile, Edge_1, 'Edge_1' )
geompy.addToStudyInFather( Projectile, Vertex_3, 'Vertex_3' )
geompy.addToStudyInFather( Projectile, Vertex_4, 'Vertex_4' )
geompy.addToStudyInFather( Projectile, Vertex_5, 'Vertex_5' )
geompy.addToStudy( ox, 'ox' )
geompy.addToStudy( Vertex_1, 'Vertex_1' )
geompy.addToStudy( oz, 'oz' )
geompy.addToStudy( oy, 'oy' )
geompy.addToStudy( Farfield_vertex, 'Farfield_vertex' )
geompy.addToStudy( Outer_domain, 'Outer_domain' )
geompy.addToStudy( Inner_Domain_vertex, 'Inner_Domain_vertex' )
geompy.addToStudy( Inner_domain, 'Inner_domain' )
geompy.addToStudyInFather( Projectile, Projectile_edge_9, 'Projectile:edge_9' )
geompy.addToStudyInFather( Projectile, Projectile_edge_14, 'Projectile:edge_14' )
geompy.addToStudy( Vertex_2, 'Vertex_2' )
geompy.addToStudy( Vertex_7, 'Vertex_7' )
geompy.addToStudy( Vertex_6, 'Vertex_6' )
geompy.addToStudy( Inner_cut, 'Inner_cut' )
geompy.addToStudy( Revolution_1_1_1, 'Revolution_1_1' )
geompy.addToStudy( Revolution_1_2_1, 'Revolution_1_2' )
geompy.addToStudy( Revolution_2_1_1, 'Revolution_2_1' )
geompy.addToStudy( Revolution_3_1_1, 'Revolution_3_1' )
geompy.addToStudy( Revolution_3_2_1, 'Revolution_3_2' )
geompy.addToStudyInFather( Revolution_1_1_1, start_0_1, 'start_0' )
geompy.addToStudyInFather( Revolution_1_2_1, ConicNose_1, 'ConicNose' )
geompy.addToStudyInFather( Revolution_2_1_1, middle_1_1, 'middle_1' )
geompy.addToStudyInFather( Revolution_3_1_1, middle_2_1, 'middle_2' )
geompy.addToStudyInFather( Revolution_3_2_1, rear_2_1, 'rear_2' )
geompy.addToStudy( ShellProjectile_1, 'ShellProjectile' )
geompy.addToStudy( Projectile_1, 'Projectile' )
geompy.addToStudyInFather( Projectile_1, Edge_1_1, 'Edge_1' )
geompy.addToStudyInFather( Projectile_1, Vertex_3_1, 'Vertex_3' )
geompy.addToStudyInFather( Projectile_1, Vertex_4_1, 'Vertex_4' )
geompy.addToStudyInFather( Projectile_1, Vertex_5_1, 'Vertex_5' )
geompy.addToStudy( ox_1, 'ox' )
geompy.addToStudy( Vertex_1_1, 'Vertex_1' )
geompy.addToStudy( oz_1, 'oz' )
geompy.addToStudy( oy_1, 'oy' )
geompy.addToStudy( Farfield_vertex_1, 'Farfield_vertex' )
geompy.addToStudy( Outer_domain_1, 'Outer_domain' )
geompy.addToStudy( Inner_Domain_vertex_1, 'Inner_Domain_vertex' )
geompy.addToStudy( Inner_domain_1, 'Inner_domain' )
geompy.addToStudyInFather( Projectile_1, Projectile_edge_9_1, 'Projectile:edge_9' )
geompy.addToStudyInFather( Projectile_1, Projectile_edge_14_1, 'Projectile:edge_14' )
geompy.addToStudy( Vertex_2_1, 'Vertex_2' )
geompy.addToStudy( Vertex_7_1, 'Vertex_7' )
geompy.addToStudy( Vertex_6_1, 'Vertex_6' )
geompy.addToStudy( Plane_1, 'Plane_1' )
geompy.addToStudy( Plane_2, 'Plane_2' )
geompy.addToStudy( Plane_3, 'Plane_3' )
geompy.addToStudy( Plane_4, 'Plane_4' )
geompy.addToStudy( Plane_5, 'Plane_5' )
geompy.addToStudy( Inner_cut_1, 'Inner_cut' )
geompy.addToStudy( innerDomainPartition, 'innerDomainPartition' )

###
### SMESH component
###

import  SMESH, SALOMEDS
from salome.smesh import smeshBuilder

smesh = smeshBuilder.New()
#smesh.SetEnablePublish( False ) # Set to False to avoid publish in study if not needed or in some particular situations:
                                 # multiples meshes built in parallel, complex and numerous mesh edition (performance)

Equi_dist = smesh.CreateHypothesis('NumberOfSegments')
Equi_dist.SetReversedEdges( [] )
Equi_dist.SetObjectEntry( "Partition_2_1" )
ViscousLayers_1 = smesh.CreateHypothesis('ViscousLayers')
ViscousLayers_2 = smesh.CreateHypothesis('ViscousLayers')
Radial_scale_0 = smesh.CreateHypothesis('NumberOfSegments')
Radial_scale_1 = smesh.CreateHypothesis('NumberOfSegments')
Viscous_Layers_front = smesh.CreateHypothesis('ViscousLayers')
Sizing_surf = smesh.CreateHypothesis('LocalLength')
ViscousLayers_1.SetTotalThickness( 1 )
ViscousLayers_1.SetNumberLayers( 30 )
ViscousLayers_1.SetStretchFactor( 1.2 )
ViscousLayers_1.SetMethod( smeshBuilder.SURF_OFFSET_SMOOTH )
ViscousLayers_1.SetFaces( [ 154 ], 0 )
Sizing_outer = smesh.CreateHypothesis('LocalLength')
ViscousLayers_2.SetTotalThickness( 1 )
ViscousLayers_2.SetNumberLayers( 30 )
ViscousLayers_2.SetStretchFactor( 1.2 )
ViscousLayers_2.SetMethod( smeshBuilder.FACE_OFFSET )
ViscousLayers_2.SetFaces( [ 144 ], 0 )
Viscous_Layers_front.SetTotalThickness( 1 )
Viscous_Layers_front.SetNumberLayers( 30 )
Viscous_Layers_front.SetStretchFactor( 1.2 )
Viscous_Layers_front.SetMethod( smeshBuilder.FACE_OFFSET )
Viscous_Layers_front.SetFaces( [ 170, 164 ], 0 )
Viscous_Layers_rear = smesh.CreateHypothesis('ViscousLayers')
Viscous_Layers_rear.SetTotalThickness( 1 )
Viscous_Layers_rear.SetNumberLayers( 30 )
Viscous_Layers_rear.SetStretchFactor( 1.2 )
Viscous_Layers_rear.SetFaces( [ 126, 123 ], 0 )
Viscous_Layers_rear.SetMethod( smeshBuilder.FACE_OFFSET )
Sizing_surf.SetLength( 0.3 )
Sizing_surf.SetPrecision( 1e-07 )
Sizing_outer.SetLength( 3 )
Sizing_outer.SetPrecision( 1e-07 )
ViscousLayers_1.SetTotalThickness( 1 )
ViscousLayers_1.SetNumberLayers( 30 )
ViscousLayers_1.SetStretchFactor( 1.2 )
ViscousLayers_1.SetMethod( smeshBuilder.SURF_OFFSET_SMOOTH )
ViscousLayers_1.SetFaces( [ 155 ], 0 )
Regular_1D = smesh.CreateHypothesis('Regular_1D')
Quadrangle_2D = smesh.CreateHypothesis('Quadrangle_2D')
Hexa_3D = smesh.CreateHypothesis('Hexa_3D')
ViscousLayers_2.SetTotalThickness( 1 )
ViscousLayers_2.SetNumberLayers( 30 )
ViscousLayers_2.SetStretchFactor( 1.2 )
ViscousLayers_2.SetMethod( smeshBuilder.FACE_OFFSET )
ViscousLayers_2.SetFaces( [ 144 ], 0 )
NETGEN_2D = smesh.CreateHypothesis('NETGEN_2D_ONLY', 'NETGENEngine')
NETGEN_3D = smesh.CreateHypothesis('NETGEN_3D', 'NETGENEngine')
Sizing_surf.SetLength( 0.3 )
Sizing_surf.SetPrecision( 1e-07 )
NETGEN_3D_Parameters_1 = smesh.CreateHypothesis('NETGEN_Parameters_3D', 'NETGENEngine')
NETGEN_3D_Parameters_1.SetMaxSize( 10 )
NETGEN_3D_Parameters_1.SetMinSize( 4.23577 )
NETGEN_3D_Parameters_1.SetOptimize( 1 )
NETGEN_3D_Parameters_1.SetFineness( 2 )
NETGEN_3D_Parameters_1.SetElemSizeWeight( 4.67329e-310 )
NETGEN_3D_Parameters_1.SetCheckOverlapping( 5 )
NETGEN_3D_Parameters_1.SetCheckChartBoundary( 3 )
NETGEN_3D_Parameters_1_1 = smesh.CreateHypothesis('NETGEN_Parameters', 'NETGENEngine')
NETGEN_1D_2D_3D = smesh.CreateHypothesis('NETGEN_2D3D', 'NETGENEngine')
Viscous_Layers_front.SetTotalThickness( 1 )
Viscous_Layers_front.SetNumberLayers( 30 )
Viscous_Layers_front.SetStretchFactor( 1.2 )
Viscous_Layers_front.SetMethod( smeshBuilder.NODE_OFFSET )
Viscous_Layers_front.SetFaces( [ 171, 165 ], 0 )
Viscous_Layers_rear.SetTotalThickness( 1 )
Viscous_Layers_rear.SetNumberLayers( 30 )
Viscous_Layers_rear.SetStretchFactor( 1.2 )
Viscous_Layers_rear.SetMethod( smeshBuilder.NODE_OFFSET )
Viscous_Layers_rear.SetFaces( [ 117, 120 ], 0 )
NETGEN_3D_Parameters_outer = smesh.CreateHypothesis('NETGEN_Parameters', 'NETGENEngine')
NETGEN_3D_Parameters_outer.SetMaxSize( 228.886 )
NETGEN_3D_Parameters_outer.SetMinSize( 5.85808 )
NETGEN_3D_Parameters_outer.SetSecondOrder( 0 )
NETGEN_3D_Parameters_outer.SetOptimize( 1 )
NETGEN_3D_Parameters_outer.SetFineness( 5 )
NETGEN_3D_Parameters_outer.SetGrowthRate( 0.1 )
NETGEN_3D_Parameters_outer.SetNbSegPerEdge( 2 )
NETGEN_3D_Parameters_outer.SetNbSegPerRadius( 3 )
NETGEN_3D_Parameters_outer.SetChordalError( -1 )
NETGEN_3D_Parameters_outer.SetChordalErrorEnabled( 0 )
NETGEN_3D_Parameters_outer.SetUseSurfaceCurvature( 1 )
NETGEN_3D_Parameters_outer.SetFuseEdges( 1 )
NETGEN_3D_Parameters_outer.SetQuadAllowed( 1 )
NETGEN_3D_Parameters_outer.SetCheckChartBoundary( 3 )
NETGEN_3D_Parameters_1_1.SetMinSize( 4.23577 )
NETGEN_3D_Parameters_1_1.SetSecondOrder( 0 )
NETGEN_3D_Parameters_1_1.SetOptimize( 1 )
NETGEN_3D_Parameters_1_1.SetChordalError( 0 )
NETGEN_3D_Parameters_1_1.SetChordalErrorEnabled( 0 )
NETGEN_3D_Parameters_1_1.SetUseSurfaceCurvature( 1 )
NETGEN_3D_Parameters_1_1.SetFuseEdges( 1 )
NETGEN_3D_Parameters_1_1.SetQuadAllowed( 0 )
NETGEN_3D_Parameters_1_1.SetMaxSize( 3 )
NETGEN_3D_Parameters_1_1.SetFineness( 4 )
NETGEN_3D_Parameters_1_1.SetCheckChartBoundary( 3 )
Number_of_Segments_1 = smesh.CreateHypothesis('NumberOfSegments')
NETGEN_3D_Parameters_1.SetOptimize( 1 )
Sizing_outer.SetLength( 2 )
Sizing_outer.SetPrecision( 1e-07 )
Number_of_Segments_1.SetNumberOfSegments( 20 )
Number_of_Segments_1.SetConversionMode( 1 )
Number_of_Segments_1.SetReversedEdges( [] )
Number_of_Segments_1.SetObjectEntry( "0:1:3:54" )
Number_of_Segments_1.SetExpressionFunction( 'sin(3.14*t)' )
NETGEN_3D_Parameters_1.SetMaxSize( 1 )
NETGEN_3D_Parameters_1.SetMinSize( 0.5 )
NETGEN_3D_Parameters_1.SetFineness( 5 )
NETGEN_3D_Parameters_1.SetGrowthRate( 0.2 )
NETGEN_3D_Parameters_1.SetElemSizeWeight( 4.67162e-310 )
NETGEN_3D_Parameters_1.SetCheckOverlapping( 4 )
NETGEN_3D_Parameters_1.SetCheckChartBoundary( 3 )
Geometric_Progression_1 = smesh.CreateHypothesis('GeometricProgression')
Geometric_Progression_1.SetStartLength( 1 )
Geometric_Progression_1.SetCommonRatio( 1.1 )
Geometric_Progression_1.SetReversedEdges( [] )
Geometric_Progression_1.SetObjectEntry( "0:1:3:54" )
NETGEN_3D_Parameters_1_1.SetMinSize( 1 )
NETGEN_3D_Parameters_1_1.SetCheckChartBoundary( 3 )
NETGEN_3D_Parameters_outer.SetMaxSize( 228.886 )
NETGEN_3D_Parameters_outer.SetMinSize( 5.85808 )
NETGEN_3D_Parameters_outer.SetSecondOrder( 0 )
NETGEN_3D_Parameters_outer.SetOptimize( 1 )
NETGEN_3D_Parameters_outer.SetFineness( 3 )
NETGEN_3D_Parameters_outer.SetChordalError( 0 )
NETGEN_3D_Parameters_outer.SetChordalErrorEnabled( 0 )
NETGEN_3D_Parameters_outer.SetUseSurfaceCurvature( 1 )
NETGEN_3D_Parameters_outer.SetFuseEdges( 1 )
NETGEN_3D_Parameters_outer.SetQuadAllowed( 1 )
NETGEN_3D_Parameters_outer.SetCheckChartBoundary( 3 )
Equi_dist.SetNumberOfSegments( 20 )
ViscousLayers_1.SetTotalThickness( 1 )
ViscousLayers_1.SetNumberLayers( 30 )
ViscousLayers_1.SetStretchFactor( 1.2 )
ViscousLayers_1.SetMethod( smeshBuilder.SURF_OFFSET_SMOOTH )
ViscousLayers_1.SetFaces( [ 139 ], 0 )
Radial_scale_0.SetNumberOfSegments( 20 )
Radial_scale_0.SetScaleFactor( 10 )
Radial_scale_0.SetReversedEdges( [ 88 ] )
Radial_scale_0.SetObjectEntry( "0:1:3:57" )
Radial_scale_front = smesh.CreateHypothesis('NumberOfSegments')
Radial_scale_front.SetNumberOfSegments( 20 )
Radial_scale_front.SetScaleFactor( 4 )
Radial_scale_front.SetReversedEdges( [ 122 ] )
Radial_scale_front.SetObjectEntry( "0:1:3:57" )
ViscousLayers_2.SetTotalThickness( 1 )
ViscousLayers_2.SetNumberLayers( 30 )
ViscousLayers_2.SetStretchFactor( 1.2 )
ViscousLayers_2.SetMethod( smeshBuilder.FACE_OFFSET )
ViscousLayers_2.SetFaces( [ 105 ], 0 )
Radial_scale_1.SetNumberOfSegments( 20 )
Radial_scale_1.SetScaleFactor( 4 )
Radial_scale_1.SetReversedEdges( [ 47 ] )
Radial_scale_1.SetObjectEntry( "0:1:3:57" )
NETGEN_3D_Parameters_1.SetMinSize( 0.1 )
Viscous_Layers_front.SetTotalThickness( 1 )
Viscous_Layers_front.SetNumberLayers( 30 )
Viscous_Layers_front.SetStretchFactor( 1.2 )
Viscous_Layers_front.SetMethod( smeshBuilder.NODE_OFFSET )
Viscous_Layers_front.SetFaces( [ 175, 172 ], 0 )
Sizing_surf.SetLength( 0.3 )
Sizing_surf.SetPrecision( 1e-07 )
NETGEN_3D_Parameters_1.SetMaxSize( 0.8 )
NETGEN_3D_Parameters_1.SetFineness( 3 )
NETGEN_3D_Parameters_1.SetElemSizeWeight( 4.67165e-310 )
NETGEN_3D_Parameters_1.SetCheckOverlapping( 4 )
NETGEN_3D_Parameters_1.SetCheckChartBoundary( 3 )
Viscous_Layers_rear.SetTotalThickness( 1 )
Viscous_Layers_rear.SetNumberLayers( 30 )
Viscous_Layers_rear.SetStretchFactor( 1.2 )
Viscous_Layers_rear.SetMethod( smeshBuilder.NODE_OFFSET )
Viscous_Layers_rear.SetFaces( [ 68, 71 ], 0 )
NETGEN_3D_Wake = smesh.CreateHypothesis('NETGEN_Parameters_3D', 'NETGENEngine')
NETGEN_3D_Wake.SetMaxSize( 3 )
NETGEN_3D_Wake.SetMinSize( 0.978661 )
NETGEN_3D_Wake.SetOptimize( 1 )
NETGEN_3D_Wake.SetFineness( 3 )
NETGEN_3D_Wake.SetElemSizeWeight( 4.67165e-310 )
NETGEN_3D_Wake.SetCheckOverlapping( 4 )
NETGEN_3D_Wake.SetCheckChartBoundary( 3 )
NETGEN_3D_Parameters_outer.SetSecondOrder( 0 )
NETGEN_3D_Parameters_outer.SetOptimize( 1 )
NETGEN_3D_Parameters_outer.SetFineness( 3 )
NETGEN_3D_Parameters_outer.SetChordalError( 0 )
NETGEN_3D_Parameters_outer.SetChordalErrorEnabled( 0 )
NETGEN_3D_Parameters_outer.SetUseSurfaceCurvature( 1 )
NETGEN_3D_Parameters_outer.SetFuseEdges( 1 )
NETGEN_3D_Parameters_outer.SetQuadAllowed( 0 )
NETGEN_3D_Parameters_outer.SetMaxSize( 20 )
NETGEN_3D_Parameters_outer.SetMinSize( 2 )
NETGEN_3D_Parameters_outer.SetCheckChartBoundary( 3 )
Sizing_outer.SetLength( 2 )
Sizing_outer.SetPrecision( 1e-07 )
NETGEN_3D_Parameters_2 = smesh.CreateHypothesis('NETGEN_Parameters', 'NETGENEngine')
NETGEN_3D_Parameters_2.SetMinSize( 4.76363 )
NETGEN_3D_Parameters_2.SetSecondOrder( 0 )
NETGEN_3D_Parameters_2.SetOptimize( 1 )
NETGEN_3D_Parameters_2.SetChordalError( -1 )
NETGEN_3D_Parameters_2.SetChordalErrorEnabled( 0 )
NETGEN_3D_Parameters_2.SetUseSurfaceCurvature( 1 )
NETGEN_3D_Parameters_2.SetFuseEdges( 1 )
NETGEN_3D_Parameters_2.SetQuadAllowed( 0 )
NETGEN_3D_Parameters_2.SetFineness( 3 )
NETGEN_3D_Parameters_2.SetMaxSize( 110 )
NETGEN_3D_Parameters_2.SetCheckChartBoundary( 3 )


## Set names of Mesh objects
smesh.SetName(NETGEN_3D_Parameters_outer, 'NETGEN 3D Parameters_outer')
smesh.SetName(Quadrangle_2D, 'Quadrangle_2D')
smesh.SetName(NETGEN_3D_Parameters_1, 'NETGEN 3D Parameters_1')
smesh.SetName(Regular_1D, 'Regular_1D')
smesh.SetName(Viscous_Layers_rear, 'Viscous Layers_rear')
smesh.SetName(NETGEN_3D, 'NETGEN 3D')
smesh.SetName(NETGEN_1D_2D_3D, 'NETGEN 1D-2D-3D')
smesh.SetName(NETGEN_2D, 'NETGEN 2D')
smesh.SetName(Hexa_3D, 'Hexa_3D')
smesh.SetName(Radial_scale_0, 'Radial_scale_0')
smesh.SetName(Radial_scale_1, 'Radial_scale_1')
smesh.SetName(Viscous_Layers_front, 'Viscous Layers_front')
smesh.SetName(Sizing_surf, 'Sizing_surf')
smesh.SetName(NETGEN_3D_Wake, 'NETGEN 3D Wake')
smesh.SetName(Equi_dist, 'Equi_dist')
smesh.SetName(ViscousLayers_1, 'ViscousLayers_1')
smesh.SetName(ViscousLayers_2, 'ViscousLayers_2')
smesh.SetName(Geometric_Progression_1, 'Geometric Progression_1')
smesh.SetName(Radial_scale_front, 'Radial_scale_front')
smesh.SetName(Number_of_Segments_1, 'Number of Segments_1')
smesh.SetName(Sizing_outer, 'Sizing_outer')
smesh.SetName(NETGEN_3D_Parameters_2, 'NETGEN 3D Parameters_2')
smesh.SetName(NETGEN_3D_Parameters_1_1, 'NETGEN 3D Parameters_1')


if salome.sg.hasDesktop():
  salome.sg.updateObjBrowser()
